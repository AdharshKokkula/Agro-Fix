Thank you for sharing the Vercel build logs. The logs clearly indicate the root cause of the issue: the Vite build process for the client (frontend) fails due to a module resolution error. This failure prevents the `dist/public` directory from being generated, which explains why you donâ€™t see the `dist` folder in your codebase and why the deployed app is not rendering the expected frontend output. Instead, Vercel might be serving raw code or an incorrect file due to the missing build artifacts.

Letâ€™s break down the issue based on the logs, identify the cause, and provide a clear solution.

---

### Analysis of the Build Logs

1. **Key Error in the Logs**:
   ```
   [21:57:02.547] [31merror during build:
   [21:57:02.548] [31m[vite]: Rollup failed to resolve import "@/components/ui/toaster" from "/vercel/path0/client/src/main.tsx".
   [21:57:02.548] This is most likely unintended because it can break your application at runtime.
   ```
   - **Cause**: Vite (using Rollup under the hood) cannot find the module `@/components/ui/toaster` imported in `client/src/main.tsx`. The `@` alias is defined in your `vite.config.ts` to point to `client/src`, so this import is looking for `client/src/components/ui/toaster`. The file or directory is either missing, incorrectly named, or not properly configured.
   - **Impact**: The build fails (`Build failed in 392ms`), so the `dist/public` directory, which should contain the compiled frontend assets (e.g., `index.html`, JavaScript, and CSS), is not generated. Without these assets, Vercel cannot serve the React frontend, leading to the raw code or an error page being displayed.

2. **Successful Server Build**:
   ```
   [21:57:02.894]   dist/index.js  44.5kb
   [21:57:02.896] âš¡ Done in 11ms
   [21:57:02.903] Build completed!
   ```
   - The server build (likely for `server/index.ts`) succeeds, producing `dist/index.js`. This suggests the backend is built correctly, but since the frontend build fails, the deployment is incomplete.

3. **No `dist/public` Directory**:
   - You mentioned that you havenâ€™t seen the `dist` folder in your codebase. This is expected because the frontend build failed, so Vite did not generate the `dist/public` directory.
   - In your `vite.config.ts`, the build output is configured as:
     ```javascript
     build: {
       outDir: path.resolve(import.meta.dirname, "dist/public"),
       emptyOutDir: true
     }
     ```
     This means the frontend assets should be in `dist/public` after a successful build, but the failure prevents this.

4. **Deployment Completion**:
   ```
   [21:57:26.116] Build Completed in /vercel/output [26s]
   [21:57:33.626] Deployment completed
   ```
   - Despite the frontend build failure, Vercel completes the deployment, likely serving the backend code or a fallback file (e.g., `server/index.ts` or another source file) as plain text. This explains why you see raw code instead of the rendered React app.

5. **Vercel Configuration**:
   - The logs donâ€™t explicitly show issues with `vercel.json`, but if itâ€™s misconfigured or missing, Vercel might not know how to handle the missing `dist/public` directory, exacerbating the issue.

---

### Root Cause
The primary issue is that the Vite build for the frontend fails because Rollup cannot resolve the import `@/components/ui/toaster` in `client/src/main.tsx`. This could be due to:
- The `toaster` component (e.g., `client/src/components/ui/toaster.tsx` or `toaster/index.tsx`) is missing or incorrectly named.
- The file path is incorrect (e.g., a typo in the import or file structure).
- The `@` alias in `vite.config.ts` is not resolving correctly during the build.
- Dependencies required for the `toaster` component (e.g., a UI library like Shadcn/UI) are not installed or configured properly.

As a result, the `dist/public` directory is not generated, and Vercel cannot serve the frontend, leading to the raw code being displayed.

---

### Steps to Fix the Issue

To resolve the build failure and ensure the frontend is correctly served, follow these steps:

#### 1. Verify the `toaster` Component
- **Check the Import Path**:
  - Open `client/src/main.tsx` and locate the import:
    ```javascript
    import { Toaster } from "@/components/ui/toaster";
    ```
  - Verify that the file `client/src/components/ui/toaster.tsx` (or `toaster/index.tsx`) exists. The `@` alias maps to `client/src`, as defined in `vite.config.ts`:
    ```javascript
    resolve: {
      alias: {
        "@": path.resolve(import.meta.dirname, "client", "src"),
      }
    }
    ```
  - If the file is missing, you need to create or install the `toaster` component. If youâ€™re using a library like **Shadcn/UI**, the `toaster` component is typically generated when you add the `toast` component.

- **If Using Shadcn/UI**:
  - Run the Shadcn/UI CLI to ensure the `toaster` component is installed:
    ```bash
    npx shadcn-ui@latest add toast
    ```
    This should create `client/src/components/ui/toaster.tsx` and related files (e.g., `toast.tsx`).
  - Ensure all dependencies for Shadcn/UI (e.g., `@radix-ui/react-toast`) are installed. Check `package.json` for:
    ```json
    "@radix-ui/react-toast": "^1.1.3",
    ```
    If missing, install them:
    ```bash
    npm install @radix-ui/react-toast
    ```

- **If Custom Component**:
  - If `toaster` is a custom component, ensure the file exists at `client/src/components/ui/toaster.tsx` or adjust the import path to match the correct location.

- **Case Sensitivity**:
  - File names are case-sensitive on Vercelâ€™s build system (Linux-based). Ensure the file name matches exactly (e.g., `toaster.tsx` vs. `Toaster.tsx`).

#### 2. Test the Build Locally
- Run the Vite build locally to confirm the issue is resolved:
  ```bash
  npm run build
  ```
- Check the terminal output for errors. If the build succeeds, verify that the `dist/public` directory is created with files like:
  ```
  dist/public/
  â”œâ”€â”€ index.html
  â”œâ”€â”€ assets/
  â”‚   â”œâ”€â”€ main-[hash].js
  â”‚   â”œâ”€â”€ main-[hash].css
  â”‚   â””â”€â”€ ...
  ```
- If the build fails with the same error, it confirms the `toaster` import issue. Fix the file or import as described above.

- Test the built app locally:
  ```bash
  npm install -g serve
  serve dist/public
  ```
  Open `http://localhost:3000` to ensure the frontend renders correctly.

#### 3. Update `package.json` and Dependencies
- Ensure all required dependencies are listed in `package.json`. For example, if using Shadcn/UI or other UI libraries, include:
  ```json
  "dependencies": {
    "@radix-ui/react-toast": "^1.1.3",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "vite": "^5.4.14",
    "@vitejs/plugin-react": "^4.0.0",
    "@replit/vite-plugin-shadcn-theme-json": "^0.0.3",
    "@replit/vite-plugin-runtime-error-modal": "^0.0.2",
    ...
  }
  ```
- Run `npm install` to ensure all dependencies are installed.
- If you suspect missing dependencies, remove `node_modules` and `package-lock.json`, then reinstall:
  ```bash
  rm -rf node_modules package-lock.json
  npm install
  ```

#### 4. Verify `vite.config.ts`
- Ensure the `@` alias is correctly defined:
  ```javascript
  import { defineConfig } from "vite";
  import react from "@vitejs/plugin-react";
  import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
  import path from "path";
  import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

  export default defineConfig({
    plugins: [
      react(),
      runtimeErrorOverlay(),
      themePlugin(),
      ...(process.env.NODE_ENV !== "production" && process.env.REPL_ID !== undefined
        ? [await import("@replit/vite-plugin-cartographer").then((m) => m.cartographer())]
        : []),
    ],
    resolve: {
      alias: {
        "@": path.resolve(import.meta.dirname, "client", "src"),
        "@shared": path.resolve(import.meta.dirname, "shared"),
        "@assets": path.resolve(import.meta.dirname, "attached_assets"),
      },
    },
    root: path.resolve(import.meta.dirname, "client"),
    build: {
      outDir: path.resolve(import.meta.dirname, "dist/public"),
      emptyOutDir: true,
    },
  });
  ```
- Confirm that `import.meta.dirname` resolves correctly to the directory containing `vite.config.ts`. If the alias path is incorrect, adjust it to ensure `@` points to `client/src`.

#### 5. Configure `vercel.json`
- Since the build is failing, the `dist/public` directory isnâ€™t generated, but ensure `vercel.json` is set up to handle both frontend and backend correctly once the build is fixed:
  ```json
  {
    "version": 2,
    "builds": [
      {
        "src": "client/**",
        "use": "@vercel/static",
        "config": {
          "distDir": "dist/public"
        }
      },
      {
        "src": "server/index.ts",
        "use": "@vercel/node"
      }
    ],
    "routes": [
      {
        "src": "/api/(.*)",
        "dest": "server/index.ts"
      },
      {
        "src": "/(.*)",
        "dest": "dist/public/$1"
      }
    ]
  }
  ```
- **Key Changes**:
  - The `src` for the static build is set to `client/**` to ensure Vercel runs the Vite build for the frontend.
  - The `distDir` is explicitly set to `dist/public`.
  - Routes ensure `/api/*` goes to the backend, and all other routes serve frontend assets.

#### 6. Update `.gitignore`
- Ensure the `dist` directory is ignored in `.gitignore` to avoid committing build artifacts:
  ```
  node_modules
  dist
  .env
  ```
- Since you donâ€™t see `dist` in your codebase, this is likely already correct, but confirm that the build process is expected to generate `dist/public` on Vercel.

#### 7. Set Environment Variables
- The backend requires `DATABASE_URL`, `SESSION_SECRET`, and `JWT_SECRET`. Ensure these are set in Vercel:
  - Go to **Settings > Environment Variables** in the Vercel dashboard.
  - Add:
    - `DATABASE_URL`: Your Neon or other database connection string.
    - `SESSION_SECRET`: A random string (e.g., generate with `node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"`).
    - `JWT_SECRET`: Another random string.
- The logs donâ€™t indicate issues with environment variables, but missing variables could cause runtime errors after fixing the build.

#### 8. Push Changes and Redeploy
- After fixing the `toaster` import (by adding the component or correcting the path), commit and push the changes:
  ```bash
  git add .
  git commit -m "Fix toaster import and Vercel build"
  git push origin main
  ```
- Monitor the Vercel build logs to ensure the frontend build succeeds and `dist/public` is generated.

#### 9. Debug Vercel Logs Post-Fix
- After redeploying, check the Vercel logs for:
  - Successful frontend build (no Rollup errors).
  - Generation of `dist/public` assets.
  - Correct routing (API routes to `server/index.ts`, others to `dist/public`).
- If the app still shows raw code, inspect the deployed URL with browser DevTools (Network tab) to see what file is being served (e.g., `server/index.ts` or an error page).

#### 10. Fallback: Create a Minimal `toaster` Component
- If youâ€™re unsure about the `toaster` component, create a minimal version to unblock the build:
  - Create `client/src/components/ui/toaster.tsx`:
    ```javascript
    import React from "react";

    export const Toaster = () => {
      return <div>Toast Placeholder</div>;
    };
    ```
  - Ensure `main.tsx` imports and uses it correctly:
    ```javascript
    import React from "react";
    import ReactDOM from "react-dom/client";
    import App from "./App";
    import { Toaster } from "@/components/ui/toaster";

    ReactDOM.createRoot(document.getElementById("root")!).render(
      <React.StrictMode>
        <App />
        <Toaster />
      </React.StrictMode>
    );
    ```
  - Rebuild and test locally, then redeploy.

---

### Expected Outcome
- Fixing the `toaster` import will allow the Vite build to succeed, generating the `dist/public` directory.
- Vercel will serve the frontend (`index.html` and assets) for non-API routes, rendering the React app.
- API routes (`/api/*`) will be handled by `server/index.ts`, returning JSON responses.
- The deployed URL should show the Agro-Fix UI (e.g., product listings, cart, etc.) instead of raw code.

---

### If the Issue Persists
If the build still fails or the app doesnâ€™t render correctly, please provide:
1. The contents of `client/src/main.tsx`.
2. The file structure under `client/src/components/ui/` (to verify `toaster`).
3. The updated Vercel build logs after applying the fix.
4. The Vercel deployment URL for inspection.
5. The `package.json` file to check dependencies.

These will help pinpoint any remaining issues, such as missing dependencies, incorrect aliases, or Shadcn/UI setup problems.

---

### Additional Notes
- **Shadcn/UI Setup**:
  - If using Shadcn/UI, ensure youâ€™ve initialized it correctly:
    ```bash
    npx shadcn-ui@latest init
    ```
    Follow the prompts to set up `components.json` and ensure all components (like `toast`) are added.
- **Replit Context**:
  - Since you mentioned Replit, ensure the project runs correctly there. Replitâ€™s file system is case-sensitive, so verify file names match exactly.
- **Vercel Build Cache**:
  - The logs show a restored build cache. If the cache is outdated, clear it in Vercel (redeploy without cache) to ensure a fresh build.

By addressing the `toaster` import issue and ensuring the Vercel configuration is correct, you should resolve the build failure and see the rendered frontend on your deployed app. Let me know if you need help with specific steps or further debugging!